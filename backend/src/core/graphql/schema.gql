# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthModel {
  accessToken: String!
  refreshToken: String!
  user: UserModel!
}

input CourseInput {
  departmentId: String!
  number: Float!
}

type CourseModel {
  createdAt: DateTime!
  department: DepartmentModel!
  departmentId: String!
  groups: [GroupModel!]
  id: String!
  number: Float!
  updatedAt: DateTime!
}

input CourseParamsInput {
  departmentTitle: String
  orderBy: String! = "asc"
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DepartmentInput {
  title: String!
}

type DepartmentModel {
  courses: [CourseModel!]
  createdAt: DateTime!
  id: String!
  title: String!
  updatedAt: DateTime!
}

input DepartmentParamsInput {
  orderBy: String! = "asc"
  title: String
}

input GroupInput {
  courseId: String
  title: String!
}

type GroupModel {
  courseId: String
  createdAt: DateTime!
  id: String!
  title: String!
  updatedAt: DateTime!
}

input GroupParamsInput {
  courseNumber: Float
  departmentTitle: String
  orderBy: String! = "asc"
  title: String
}

input HealthGroupInput {
  title: String!
}

type HealthGroupModel {
  createdAt: DateTime!
  id: String!
  title: String!
  updatedAt: DateTime!
}

input HealthGroupParamsInput {
  orderBy: String! = "asc"
  title: String
}

input LoginInput {
  login: String!
  password: String!
}

type Mutation {
  changePassword(id: String!, newPassword: String!, oldPassword: String!): UserModel!
  createCourse(data: CourseInput!): CourseModel!
  createDepartment(data: DepartmentInput!): DepartmentModel!
  createGroup(data: GroupInput!): GroupModel!
  createHealthGroup(data: HealthGroupInput!): HealthGroupModel!
  createPhysicalEducation(data: PhysicalEducationInput!): PhysicalEducationModel!
  createStudent(data: StudentInput!): StudentModel!
  getNewTokens(refreshToken: String!, userId: String!): AuthModel!
  login(data: LoginInput!): AuthModel!
  logout: Boolean!
  register(data: RegisterInput!): AuthModel!
  removeCourse(id: String!): Boolean!
  removeDepartment(id: String!): Boolean!
  removeGroup(id: String!): Boolean!
  removeHealthGroup(id: String!): Boolean!
  removePhysicalEducation(id: String!): Boolean!
  removeStudent(id: String!): Boolean!
  removeUser(id: String!): Boolean!
  updateCourse(data: UpdateCourseInput!, id: String!): CourseModel!
  updateDepartment(data: DepartmentInput!, id: String!): DepartmentModel!
  updateGroup(data: GroupInput!, id: String!): GroupModel!
  updateHealthGroup(data: HealthGroupInput!, id: String!): HealthGroupModel!
  updatePhysicalEducation(data: PhysicalEducationInput!, id: String!): PhysicalEducationModel!
  updateStudent(data: UpdateStudentInput!, id: String!): StudentModel!
  updateUser(data: UpdateUserInput!, id: String!): UserModel!
}

input PhysicalEducationInput {
  title: String!
}

type PhysicalEducationModel {
  createdAt: DateTime!
  id: String!
  title: String!
  updatedAt: DateTime!
}

input PhysicalEducationParamsInput {
  orderBy: String! = "asc"
  title: String
}

type Query {
  getAllCourses(params: CourseParamsInput!): [CourseModel!]!
  getAllDepartments(params: DepartmentParamsInput!): [DepartmentModel!]!
  getAllGroups(params: GroupParamsInput!): [GroupModel!]!
  getAllHealthGroups(params: HealthGroupParamsInput!): [HealthGroupModel!]!
  getAllPhysicalEducations(params: PhysicalEducationParamsInput!): [PhysicalEducationModel!]!
  getAllStudents(params: StudentParamsInput!): [StudentModel!]!
  getCourseById(id: String!): CourseModel!
  getDepartmentById(id: String!): DepartmentModel!
  getDepartmentByTitle(title: String!): DepartmentModel!
  getGroupById(id: String!): GroupModel!
  getGroupByTitle(title: String!): GroupModel!
  getHealthGroupById(id: String!): HealthGroupModel!
  getHealthGroupByTitle(title: String!): HealthGroupModel!
  getPhysicalEducationById(id: String!): PhysicalEducationModel!
  getPhysicalEducationByTitle(title: String!): PhysicalEducationModel!
  getProfile: UserModel!
  getStudentById(id: String!): StudentModel!
  getUserByLogin(login: String!): UserModel!
}

input RegisterInput {
  isAdmin: Boolean!
  login: String!
  password: String!
}

input StudentInput {
  birthDate: DateTime!
  firstName: String!
  groupId: String
  isExpelled: Boolean! = false
  lastName: String!
  secondName: String
}

type StudentModel {
  birthDate: DateTime!
  createdAt: DateTime!
  firstName: String!
  group: GroupModel!
  groupId: String
  id: String!
  isExpelled: Boolean!
  lastName: String!
  secondName: String
  updatedAt: DateTime!
}

input StudentParamsInput {
  courseNumber: Float
  departmentTitle: String
  groupId: String
  groupTitle: String
  isExpelled: Boolean = false
  lastName: String
  limit: Float! = 25
  orderBy: String! = "asc"
  page: Float! = 1
}

input UpdateCourseInput {
  departmentId: String
  number: Float
}

input UpdateStudentInput {
  birthDate: DateTime
  firstName: String
  groupId: String
  isExpelled: Boolean = false
  lastName: String
  secondName: String
}

input UpdateUserInput {
  isAdmin: Boolean
  login: String
  password: String
}

type UserModel {
  id: ID!
  isAdmin: Boolean!
  login: String!
}