# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthModel {
  accessToken: String!
  refreshToken: String!
  user: UserModel!
}

input CourseInput {
  departmentId: String!
  number: Float!
}

type CourseModel {
  department: DepartmentModel!
  departmentId: String!
  groups: [GroupModel!]
  number: Float!
}

input DepartmentInput {
  title: String!
}

type DepartmentModel {
  courses: [CourseModel!]
  title: String!
}

input DepartmentParamsInput {
  orderBy: String! = "asc"
  title: String
}

input GroupInput {
  courseId: String
  title: String!
}

type GroupModel {
  courseId: String
  title: String!
}

input LoginInput {
  login: String!
  password: String!
}

type Mutation {
  changePassword(id: String!, newPassword: String!, oldPassword: String!): UserModel!
  createCourse(data: CourseInput!): CourseModel!
  createDepartment(data: DepartmentInput!): DepartmentModel!
  createGroup(data: GroupInput!): GroupModel!
  getNewTokens(refreshToken: String!, userId: String!): AuthModel!
  login(data: LoginInput!): AuthModel!
  logout: Boolean!
  register(data: RegisterInput!): AuthModel!
  removeCourse(id: String!): Boolean!
  removeDepartment(id: String!): Boolean!
  removeGroup(id: String!): Boolean!
  removeUser(id: String!): Boolean!
  updateCourse(data: UpdateCourseInput!, id: String!): CourseModel!
  updateDepartment(data: DepartmentInput!, id: String!): DepartmentModel!
  updateGroup(data: GroupInput!, id: String!): GroupModel!
  updateUser(data: UpdateUserInput!, id: String!): UserModel!
}

type Query {
  getAllCourses: [CourseModel!]!
  getAllDepartments(params: DepartmentParamsInput!): [DepartmentModel!]!
  getAllGroups(orderBy: String!, title: String): [GroupModel!]!
  getCourseById(id: String!): CourseModel!
  getDepartmentById(id: String!): DepartmentModel!
  getDepartmentByTitle(title: String!): DepartmentModel!
  getGroupById(id: String!): GroupModel!
  getGroupByTitle(title: String!): GroupModel!
  getProfile: UserModel!
  getUserByLogin(login: String!): UserModel!
}

input RegisterInput {
  isAdmin: Boolean!
  login: String!
  password: String!
}

input UpdateCourseInput {
  departmentId: String
  number: Float
}

input UpdateUserInput {
  isAdmin: Boolean
  login: String
  password: String
}

type UserModel {
  id: ID!
  isAdmin: Boolean!
  login: String!
}